(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'getCheck' is not defined"
p3
sS'layer'
p4
S'/home/mtk/Dropbox/diff/newsite/web2py/applications/difflet/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\ndef _thingId(ename):\n    return db(db.thing.name==ename).select(db.thing.id)[0][\'id\']\n\ndef _thingName(id):\n    return db(db.thing.id==id).select(db.thing.name)[0][\'name\']\n\ndef index():\n    redirect(URL(\'default\', \'search\'))\n    response.flash = T("Hello World")\n    return dict(message=T(\'Difflet App Loaded!\'))\n\ndef search():\n    recents = db(db.recents).select(db.recents.thing1, db.recents.thing2, orderby = ~db.recents.last_accessed, limitby=(0,5))\n    recent_searches = []\n    try:\n        for r in recents:\n            recent_searches.append( (_thingName(r[\'thing1\']), _thingName(r[\'thing2\']))  )\n    except:\n        pass\n    return locals()\n\ndef saveSearch(e1, e2): # save to recents\n    from datetime import datetime as dt\n    now = dt.today()\n    e1id, e2id = _thingId(e1), _thingId(e2)\n    e1id, e2id = min(e1id, e2id), max(e1id, e2id)\n    q = (db.recents.thing1 == e1id) & (db.recents.thing2 == e2id)\n    myset = db(q).select(db.recents.ALL, limitby=(0,1))\n    if myset:\n        db(q).update(last_accessed=now)\n    else:\n        db.recents.insert(thing1 =e1id, thing2= e2id, last_accessed=now)\n    print "saved recents %s vs %s" % (e1, e2)\n    q2 = (db.popular.thing1 == e1id) & (db.popular.thing2 == e2id)\n    myset = db(q2).select(db.popular.ALL, limitby=(0,1))\n    if myset:\n        oldcount = myset[0][\'hits\']\n        db(q2).update(hits = oldcount + 1, last_accessed=now)\n    else:\n        db.popular.insert(thing1 =e1id, thing2= e2id, hits=1, last_accessed=now)\n    print "update hit %s vs %s" % (e1, e2)\n    return\n\ndef random():\n    # \'country\', animal and company\n    data = [\n     [\'india\', \'australia\', \'egypt\'],\n     [\'lion\', \'deer\'],\n     [\'apple co.\', \'google\', \'ibm\']\n    ]\n    import random as rand_\n    r1 = rand_.randrange(0, len(data))\n    r11 = data[r1][rand_.randrange(0, len(data[r1]))]\n    r12 = r11\n    while r11 == r12:\n        r12 = data[r1][rand_.randrange(0, len(data[r1]))]\n    redirect(URL(\'default\', \'difflet\', vars={\'e1\': r11, \'e2\': r12} ))\n\ndef difflet():\n    e1, e2 = request.vars[\'e1\'],request.vars[\'e2\']\n    e1, e2 = e1.lower(), e2.lower()\n    saveSearch(e1, e2)\n    #e1id=(db(db.thing.name==e1).select())[0][\'id\']\n    #e2id=(db(db.thing.name==e2).select())[0][\'id\']\n\n    q1 = (db.listings.thing == db.thing.id) & (db.listings.point == db.point.id) & (db.listings.description == db.description.id) & (db.thing.name == e1)\n    q2 = (db.listings.thing == db.thing.id) & (db.listings.point == db.point.id) & (db.listings.description == db.description.id) & (db.thing.name == e2)\n    \n    e1rows = db(q1).select(db.point.property, db.description.body, db.point.id)\n    e2rows = db(q2).select(db.point.property, db.description.body, db.point.id)\n    #e2rows = db(db.listing.entity==e2id).select(join = db.diff_point.on(db.listing.diff_point == db.diff_point.id))\n\n    e1_dp_id = []\n    for i in range(0, len(e1rows)):\n        e1_dp_id.append(e1rows[i][\'point\'][\'id\'])\n        #e1_dp_id.append(e1rows[i][\'diff_point.id\'] )\n    e2_dp_id = []\n    for i in range(0, len(e2rows)):\n        e2_dp_id.append(e2rows[i][\'point\'][\'id\'])\n        #e2_dp_id.append(e2rows[i][\'diff_point.id\'] )\n\n    # {  diff_point : (e1, e2)}\n    common=[]\n    for i in e1_dp_id:\n        if i in e2_dp_id:\n            common.append(i)\n\n    output={}\n\n    for r in e1rows:\n        if r[\'point\'][\'id\'] in common:\n            output[r[\'point\'][\'property\']] = (r[\'description\'][\'body\'] , \'\')\n\n    for r in e2rows:\n        if r[\'point\'][\'id\'] in common:\n            old_tuple = output[r[\'point\'][\'property\']]\n            output[r[\'point\'][\'property\']] = (old_tuple[0], r[\'description\'][\'body\'])\n#        if r[\'diff_point.id\'] in common:\n#            old_tuple = output[r[\'diff_point.name\']]\n#            output[r[\'diff_point.name\']] =  ( old_tuple[0],  r[\'listing.summary\'])\n    diffvideo = request.vars[\'v\'] == \'2\'\n    return locals()\n\n\ndef create():\n    e = request.args[0]\n    if e == \'category\':\n        category = SQLFORM(db.category).process()\n    if e == \'thing\':\n        thing = SQLFORM(db.thing).process()\n    if e == \'point\':\n        point = SQLFORM(db.point).process()\n    if e == \'description\':\n        description = SQLFORM(db.description).process()\n    if e == \'listing\':\n        listing = SQLFORM(db.listings).process()\n    if e == \'recent\':\n        recent = SQLFORM(db.recents).process()\n    if e == \'popular\':\n        popular = SQLFORM(db.popular).process()\n    return locals()\n\ndef managething():\n    thing = SQLFORM.smartgrid(db.thing)\n    return locals()\n\ndef manage():\n    e = request.args(0)\n    if e == \'category\' or e is None:\n        #category = SQLFORM.grid(db.category)\n        category = SQLFORM.smartgrid(db.category)\n    if e == \'thing\' or e is None:\n        thing = SQLFORM.smartgrid(db.thing)\n    if e == \'point\' or e is None:\n        point = SQLFORM.smartgrid(db.point)\n    if e == \'description\' or e is None:\n        description = SQLFORM.smartgrid(db.description)\n    if e == \'listing\' or e is None:\n        listing = SQLFORM.smartgrid(db.listings)\n    if e == \'recent\' or e is None:\n        recent = SQLFORM.smartgrid(db.recents)\n    if e == \'popular\' or e is None:\n        popular = SQLFORM.smartgrid(db.popular)\n    return locals()\n\n\ndef template():\n    response.view = \'default/difflet_template.html\'\n    return locals()\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef about():\n    return locals()\n\n\n@cache.action()\ndef download():\n    """]\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\ndef html():\n    a=getCheck(6)\n    print a\n    return locals()\n\nresponse._vars=response._caller(html)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mtk/Dropbox/diff/newsite/web2py/applications/difflet/controllers/default.py", line 211, in <module>\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/applications/difflet/controllers/default.py", line 207, in html\n    a=getCheck(6)\nNameError: global name \'getCheck\' is not defined\n'
p11
s.