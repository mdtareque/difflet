(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 741, in _connect\n    self._request_authentication()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 796, in _request_authentication\n    self._send_authentication()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 845, in _send_authentication\n    auth_packet.check_error()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 341, in check_error\n    raise_mysql_exception(self.__data)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/err.py", line 142, in raise_mysql_exception\n    _check_mysql_exception(errinfo)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/err.py", line 138, in _check_mysql_exception\n    raise InternalError, (errno, errorvalue)\nInternalError: (1049, u"Unknown database \'difflet_db\'")\n'
p3
sS'layer'
p4
S'/home/mtk/Dropbox/diff/newsite/web2py/applications/difflet/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(myconf.get(\'db.uri\'),\n             pool_size=myconf.get(\'db.pool_size\'),\n             migrate_enabled=myconf.get(\'db.migrate\'),\n             check_reserved=[\'all\'])\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.define_tables(username=False, signature=False)\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mtk/Dropbox/diff/newsite/web2py/applications/difflet/models/db.py", line 34, in <module>\n    check_reserved=[\'all\'])\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 741, in _connect\n    self._request_authentication()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 796, in _request_authentication\n    self._send_authentication()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 845, in _send_authentication\n    auth_packet.check_error()\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/connections.py", line 341, in check_error\n    raise_mysql_exception(self.__data)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/err.py", line 142, in raise_mysql_exception\n    _check_mysql_exception(errinfo)\n  File "/home/mtk/Dropbox/diff/newsite/web2py/gluon/contrib/pymysql/err.py", line 138, in _check_mysql_exception\n    raise InternalError, (errno, errorvalue)\nInternalError: (1049, u"Unknown database \'difflet_db\'")\n\n'
p11
s.